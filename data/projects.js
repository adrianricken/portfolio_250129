export const projects = [
  {
    id: "hide-and-seek",
    name: "Hide and Seek",
    description:
      "Interaktive Plattform zum Erkunden der Berliner Parks mit Fokus auf Sportangebote.",
    descriptionLong: `Mit meinem Abschlussprojekt Hide and Seek habe ich es mir zum Ziel gesetzt, die zahlreichen √∂ffentlichen Parks Berlins mit besonderem Fokus auf das sportliche Angebot zu analysieren und √ºbersichtlich darzustellen. Nutzer k√∂nnen in einer interaktiven Gesamt√ºbersicht gezielt nach Parks filtern, die ihre gew√ºnschte Sportart anbieten. Auf der Detailseite eines Parks lassen sich die verf√ºgbaren Sportm√∂glichkeiten weiter eingrenzen, sodass der genaue Standort der gesuchten Aktivit√§t auf einen Blick ersichtlich ist. Neben der Filteroption gibt es selbstverst√§ndlich auch die M√∂glichkeit, per Texteingabe nach konkreten Parks zu suchen. Dar√ºber hinaus bietet Hide and Seek die M√∂glichkeit, Parks als Favoriten zu speichern. Eingeloggte Nutzer k√∂nnen zudem Kommentare hinterlassen, um ihre Erfahrungen zu teilen oder Empfehlungen zu geben. In einem n√§chsten Schritt soll die Plattform um einen Event-Bereich erweitert werden. So werden anstehende Veranstaltungen wie Flohm√§rkte, Konzerte oder Sportturniere direkt bei den jeweiligen Parks angezeigt ‚Äì damit alle relevanten Informationen f√ºr den perfekten Parkbesuch an einem Ort verf√ºgbar sind.`,
    technologies: ["React", "Next.js", "MongoDB", "Leaflet / OpenStreetMap"],
    image: "/projects/hide-and-seek.png",
    imageDetail: "/projects/hideandseekDetail.png",
    github: "https://github.com/adrianricken/hide-and-seek",
    demo: "https://hide-and-seek-pi.vercel.app",
    features: [
      {
        title: "Interaktive Park√ºbersicht",
        icon: "üó∫Ô∏è",
        description:
          "Nutzer k√∂nnen durch eine interaktive Karte alle Parks in Berlin entdecken. Jeder Park wird auf der Karte angezeigt und bietet eine Detailansicht.",
      },
      {
        title: "Park-Suche & Filter",
        icon: "üîç",
        description:
          "Die App bietet eine Such- und Filterfunktion, mit der Nutzer gezielt nach Parks suchen oder nach spezifischen Sportangeboten (z. B. Tischtennis) filtern k√∂nnen.",
      },
      {
        title: "Kommentare",
        icon: "üí¨",
        description:
          "Eingeloggte Nutzer k√∂nnen Kommentare zu den Parks hinterlassen und ihre pers√∂nlichen Eindr√ºcke oder Erfahrungen teilen.",
      },
    ],
  },
  {
    id: "art-gallery",
    name: "Art Gallery App",
    description:
      "Kunstgallerie-App zum Durchsuchen von Kunstwerken mit Favoritenfunktion.",
    descriptionLong:
      "Diese Galerie-App soll eine Sammlung von Kunstwerken aus einer externen API anzeigen. Der Fokus liegt dabei auf einer strukturierten und modularen Umsetzung in Next.js, mit besonderem Augenmerk auf das Fetching und die Verwaltung von Zustandsdaten. Ziele der App: Kunstwerke mit Bild und relevanten Informationen aus einer API abrufen und anzeigen. Nutzerinteraktionen erm√∂glichen, indem zus√§tzliche Informationen zu Kunstwerken gespeichert werden. Eine gut strukturierte Codebasis mit wiederverwendbaren Komponenten und sauberem Zustandshandling aufbauen. Best Practices in Next.js und React umsetzen, insbesondere beim Laden von Daten und der Handhabung von Bildern mit next/image. Kollaboratives Arbeiten mit GitHub und die Nutzung von Branches und Pull Requests f√ºr eine effiziente Zusammenarbeit im Team.",
    technologies: ["React", "Next.js", "MongoDB"],
    image: "/projects/art-gallery.png",
    github: "https://github.com/adrianricken/adrian-andreas-art-gallery-app",
    demo: "https://adrian-andreas-art-gallery-app.vercel.app/",
    features: [
      {
        title: "API-Daten-Abruf",
        icon: "üñºÔ∏è",
        description:
          "Die App l√§dt Kunstwerke aus einer API und zeigt sie in einer Galerieansicht an. Mithilfe des next/image-Components werden die Bilder optimiert und effizient geladen.",
      },
      {
        title: "Zustandsmanagement",
        icon: "‚≠ê",
        description:
          "Der Zustand der App wird dynamisch verwaltet, sodass √Ñnderungen sofort und reibungslos angezeigt werden.",
      },
      {
        title: "Modularer Code",
        icon: "üõ†Ô∏è",
        description:
          "Die App ist in isolierte, wiederverwendbare Komponenten unterteilt. So wird sichergestellt, dass der Code leicht gewartet und erweitert werden kann.",
      },
    ],
  },
  {
    id: "weather-activities",
    name: "Weather Activities App",
    description:
      "App, um Aktivit√§ten zu speichern und je nach aktuellem Wetter Optionen anzuzeigen.",
    descriptionLong:
      "Diese App nutzt eine Wetter-API, um basierend auf den aktuellen Wetterbedingungen passende Aktivit√§ten aus einer vordefinierten Liste vorzuschlagen. Zus√§tzlich k√∂nnen Nutzer eigene Aktivit√§ten hinzuf√ºgen und l√∂schen. Ziele der App: Wetterdaten von einer API abrufen und in der App verwenden. Basierend auf dem Wetter passende Aktivit√§ten anzeigen. Nutzern erm√∂glichen, Aktivit√§ten zur Liste hinzuzuf√ºgen und zu l√∂schen (CRUD-Funktionalit√§t). Die Kernlogik in React umsetzen, insbesondere den Umgang mit Zustand und Benutzerinteraktionen √ºben. Eine strukturierte Codebasis mit klaren Komponenten und sauberem Zustandshandling erstellen.",
    technologies: ["React", "Next.js", "Weather API"],
    image: "/projects/weather-activities.png",
    github: "https://github.com/adrianricken/adrian-paulina-weather-app",
    demo: "https://paulina-adrian-weather-app.vercel.app/",
    features: [
      {
        title: "CRUD-Operationen",
        icon: "‚úçÔ∏è",
        description:
          "Nutzer k√∂nnen Aktivit√§ten zur Liste hinzuf√ºgen, bestehende Aktivit√§ten anzeigen, bestehende Aktivit√§ten bearbeiten und l√∂schen.",
      },
      {
        title: "Dynamisches Zustandshandling",
        icon: "üîÑ",
        description:
          "Die App verwaltet den Zustand der Aktivit√§tenliste und aktualisiert die angezeigten Vorschl√§ge je nach Nutzerinteraktion und den abgerufenen Wetterdaten.",
      },
      {
        title: "Wetterbasierte Aktivit√§tsvorschl√§ge",
        icon: "üå§Ô∏è",
        description:
          "Die App ruft Wetterdaten von einer API ab und schl√§gt basierend auf den aktuellen Wetterbedingungen passende Aktivit√§ten vor.",
      },
    ],
  },
];
